#! /usr/bin/env python3
# -*- coding: utf-8 -*-

#---- code by Urs Schroffenegger ----------------------------------------------

"""Script to run the jupyter notebooks to create a report."""

import argparse

import nbformat

from traitlets.config import Config
from jupyter_contrib_nbextensions.nbconvert_support import TocExporter

from nbparameterise import (
    extract_parameters, replace_definitions, parameter_values
)

import pathlib

import datetime
import os

parser = argparse.ArgumentParser(description='THOR report builder')

parser.add_argument("data_folder",
                    action='store',
                    default="./Alfrodull/experiments/ubelix/walf_spinup",
                    help="folder to look for data")
parser.add_argument('-j', '--jupnb',
                    default="./mjolnir/mjolnyr.ipynb",
                    action='store',
                    help="jupyter notebook to run")
parser.add_argument('--title',
                    default="Report", action='store',
                    type=str,
                    help="notebook title appearing in browser")
parser.add_argument('-t', '--timeout',
                    default=5400, action='store',
                    type=int,
                    help="notebook cell execution timeout")

args = parser.parse_args()

base_folder = pathlib.Path(args.data_folder).resolve()
notebook_file = pathlib.Path(args.jupnb).resolve()

notebook_folder = notebook_file.parent.resolve()
output_path_abs = base_folder / "report"
if not output_path_abs.exists():
    output_path_abs.mkdir(exist_ok=True, parents=True)

nb_timeout = args.timeout

start_time = datetime.datetime.now()
print(f"started {notebook_file} on {start_time} on {base_folder}")
notebook_code = notebook_file.open().read()

notebook = nbformat.reads(notebook_code, as_version=4)
if args.title == "Report":
    try:
        notebook['metadata']['title'] = base_folder.resolve().parts[-1]
    except:
        print("Failed guessing target directory name for title, using default")
        notebook['metadata']['title'] = args.title
else:
    notebook['metadata']['title'] = args.title

c = Config({'ExecutePreprocessor': {'enabled': True,
                                    'timeout': nb_timeout},
            'ExtractOutputPreprocessor': {'enabled': True},
            'TemplateExporter': {
    # 'exclude_code_cell': True,
    'exclude_input': True
}
}
)

html_exporter = TocExporter(config=c, timeout=-1)

orig_parameters = extract_parameters(notebook)

config_dict = dict(
    data_path=str(base_folder),
    mjolnir_path=str(notebook_folder),
    output_path="./",
    FIGSIZE_x=15,
    FIGSIZE_y=12
)

params = parameter_values(orig_parameters,
                          **config_dict)

# Make a notebook object with these definitions, and execute it.
new_nb = replace_definitions(notebook, params, execute=False)

os.chdir(output_path_abs)
(body, resources) = html_exporter.from_notebook_node(new_nb)
# print("Resources keys")
# print(resources.keys())

# print("Resources outputs keys")
# print(resources['outputs'].keys())
# print("inlining")
# print(resources["inlining"])
# print("metadata")
# print(resources["metadata"])
for k, v in resources['outputs'].items():
    print("saving ", k)
    f = open(k, "wb")
    f.write(v)
    f.close()


output_file = output_path_abs / "mjolnyr_report.html"
output_file.open("w").write(body)
stop_time = datetime.datetime.now()

delta = stop_time - start_time

print(f"ran muninn in {delta}")
