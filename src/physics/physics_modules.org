
* Physics
THOR runs the GCM dynamical core and can then run specific physics function for various simulations. Different users will want to use the dynamical core with different physics, thus, it is possible to compile physics outside of the THOR directory tree, to keep it separated from the dynamical core code. 


** Code structure for Physics code
   The code is separated in a physics manager, that can live in an external code repository, separate from the GCM Core.
   
   They are compiled as a library that the THOR makefile integrates, and must provide an interface defined by [[src/headers/phy_modules.h][src/headers/phy_modules.h]].


*** Physics manager interface 
    The manager code is called by THOR at various points along the run of the simulation, to perform what's needed from the sim.

    They will receive the state from the dynamical core and should define their own variables for simulation.

**** Initialise and Configure

**** Allocate and free memory
     Called at start and end to allocate and free memory used by on host and device

**** Initialise Data
     TBD: should probably also receive startupfile?
**** loop
     called after the dynamical core update in the main loop, receives the GCM state data and update their state. 

**** Store
     storage function receives a reference to a ~storage~ object, that points to the output file for the current timestep, already containing the dumps of the dynamic core. It has function to output tables and values, as ~int~ or ~double~.
     
     Using this, the physics module data gets automatically added to the dynamical core data.




*** Physics 
    Some shared physics examples are implemented in the ~modules~ directory, providing a standard interface, so that they can be easily reused in diverse managers implementing different combination of physics. 

** Compiling modules
   The physics module should build a static library in its root directory, with the name libphy_modules.a. This will be linked into the main THOR code. 
   The main Makefile calls the Makefile in the root of the physics module directory. This directory is found by the variable ~MODULES_SRC~, set in the ~Makefile.conf~ configuration makefile, used by the main makfile at the root of the project.
   It should also have a ~clean~ target, to clean up the build files. See the example directories.

 *NOTE*

   Physics modules are linked as a static library from the main makefile, so if you use any of the routines and classes provided by the main executable (e.g. ~storage~ class for output), you do not need to compile it and link it to the physics modules library, or you'll end up with errors about multiple definitions of some objects.
   
** Examples

*** empty
    Bare skelton to implement your own basic module, this contains the minimum interface that is called by the dynamical core to run physics functions and does nothing.
*** simple
    Simple example implementing radiative transfer directly in the physics module.
*** multi
    Example that can use multiple physics modules. Currently contains radiative transfer example, using modules in an external directory, showing how modules can be implemented to be reused in multiple physical modules constructs.
